snippet #!
	#!/usr/bin/env python
# Module Docstring
snippet docs
	"""
	${1}
	"""

	from __future__ import division, print_function

	__author__  = "${2:`g:snips_author`}"
# New Class
snippet class
	class ${1:ClassName}(${2:object}):
		"""
		${3:docstring for $1}
		"""

		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""
		${3:docstring for $1}
		"""

		${4:pass}

snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}

# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Encodes
snippet cutf
	# -*- coding: utf-8 -*-
snippet clatin
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-
# Lambda
snippet ld
	${1:var} = lambda ${2:vars}: ${3:action}
snippet key
	${1:key}=lambda ${2:x}: ${3:x}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
# if __name__ == '__main__':
snippet main
	def main():
		${1}

	if __name__ == '__main__':
		main()

# if __debug__
snippet ifdebug
	if __debug__:
		log.debug("${1:text}")
# __magic__
snippet _
	__${1:init}__${2}
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})${2}
# test function/method
snippet test
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${3:pass}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${3:pass}
snippet fut
	from __future__ import ${1:division}
# My shortcuts
snippet log
	from logbook import Logger
	log = Logger(__name__)
snippet p.load
	with open(${1:fname}, "rb") as ${2:fobj}:
		${3:var} = cPickle.load(${4:$2})
snippet p.dump
	with open(${1:fname}, "wb") as ${2:fobj}:
		cPickle.dump(${3:var}, ${4:$2}, -1)
snippet j.load
	with open(${1:fname}) as ${2:fobj}:
		${3:var} = json.load(${4:$2})
snippet j.dump
	with open(${1:fname}, "w") as ${2:fobj}:
		json.dump(${3:var}, ${4:$2})
snippet copen
	with codecs.open(${1:fname}, "${2:r}", "utf-8") as ${3:fobj}:
		${4:pass}
snippet open
	with open(${1:fname}, "${2:r}") as ${3:fobj}:
		${4:pass}
snippet li
	log.info("${1}")
snippet lp
	"/local/parantapa/${1}"
snippet dmn
	import pypb.dmn
	import rconfig
	pypb.dmn.LOGDIR = rconfig.LOGDIR
	pypb.dmn.daemonize(LOGDIR)
snippet sutf
	import sys
	import codecs
	sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
snippet gpatchall
	import gevent.monkey
	gevent.monkey.patch_all()
snippet ifabort
	if ${1:condition}:
		abort(${2:400}, "${3:Bad request}")
		return
