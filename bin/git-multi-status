#!/usr/bin/env python3
"""
Get the status of multiple git repositories.

Usage: git-multi-status [DIR|DIR+] ...

It accepts a list of directories as command line argument. If the directory
name finishes with a "+", then the subdirectories of the given directory
are used instead of the directory itself.

The directories are then checked for git repositories. For each git repository
found, this prints out the repos that have un pushed commits in them.
"""

__author__  = "Parantapa Bhattacharya <pb@parantapa.net>"

import sys
import time
from os import chdir
from os.path import join, abspath, basename, dirname
from glob import glob
from subprocess import check_output, CalledProcessError

import click

def get_git_repos(xs):
    """
    Get the git directories from the given directories.
    """

    xs = [join(x, ".git") for x in xs]
    xs = [glob(x) for x in xs]
    xs = [y for ys in xs for y in ys]
    xs = [dirname(x) for x in xs]
    xs = [abspath(x) for x in xs]
    return xs

def get_git_status():
    """
    Get some details about git repository.
    """

    try:
        cmd = ["git", "branch", "--list"]
        with open("/dev/null", "w") as null:
            output = check_output(cmd, stderr=null, text=True).splitlines()

        line = [x for x in output if x[0] == "*"][0]
        branch = line[2:].strip()
    except (CalledProcessError, IndexError):
        return "!"

    try:
        cmd = ["git", "config", "--get", "branch.{}.remote".format(branch)]
        remote = check_output(cmd, text=True).strip()

        cmd = ["git", "config", "--get", "branch.{}.merge".format(branch)]
        remote_branch = check_output(cmd, text=True).strip()
        remote_branch = remote_branch.split("/")[-1]

        upstream = "{}/{}".format(remote, remote_branch)
    except CalledProcessError:
        upstream = None

    if upstream is None:
        try:
            cmd = ["git", "config", "--get", "svn-remote.svn.fetch"]
            svn_refs = check_output(cmd, text=True).strip()
            upstream = svn_refs.split("/")[-1]
        except CalledProcessError:
            pass

    if upstream is None:
        return "-"

    cmd = ["git", "status", "--porcelain"]
    with open("/dev/null", "w") as null:
        output = check_output(cmd, stderr=null, text=True).splitlines()

    untracked = sum(1 for x in output if x.startswith("??"))
    indexed   = sum(1 for x in output if x[0] == "A")
    dirty     = sum(1 for x in output if x[1] in "MD")

    if "HEAD detached" not in branch:
        cmd = ["git", "rev-list", "--count", "--left-right", "{}...{}".format(branch, upstream)]
        output = check_output(cmd, text=True)

        forward, behind = output.split()
        forward, behind = int(forward), int(behind)
    else:
        forward, behind = 0, 0

    keys = "branch upstream untracked indexed dirty forward behind".split()
    vals = locals()
    return {k: vals[k] for k in keys}

def get_git_code(repo, status):
    """
    Create a display code from the git status.
    """

    repo = basename(repo)

    if status == "!":
        return "{}!".format(repo)

    code = ""
    if status["untracked"]:
        code += "%"
    if status["indexed"]:
        code += "+"
    if status["dirty"]:
        code += "*"
    if status["behind"]:
        code += "<"
    if status["forward"]:
        code += ">"
    if code == "":
        return ""

    return "{}{}".format(repo, code)

@click.command()
@click.option("-c", "--repo-dirs", default=None, type=click.File(),
              help="Use a file containing list of repo dirs instead of command line")
@click.option("-1", "--linewise", is_flag=True,
              help="One repo code per line")
@click.option("-l", "--loop", is_flag=True,
              help="Repleatedly print out the states")
@click.option("-d", "--delay", default=5,
              help="Delay between the loops")
@click.argument("repos", nargs=-1)
def main(repo_dirs, linewise, loop, delay, repos):
    """
    Get the status of multiple git repositories.
    """

    if repo_dirs is not None:
        repos = repo_dirs.read().splitlines()
    if not repos:
        return

    while True:
        dirs = get_git_repos(repos)

        codes = []
        for d in dirs:
            chdir(d)

            status = get_git_status()
            if status == "-":
                continue

            code = get_git_code(d, status)
            if code:
                codes.append(code)

        if linewise:
            codes = "\n".join(codes)
        else:
            codes = " ".join(codes)
        click.echo(codes)

        if not loop:
            break
        time.sleep(delay)

if __name__ == '__main__':
    main()

