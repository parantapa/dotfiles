#!/usr/bin/env python3
"""
Get the status of multiple git repositories.

Usage: git-multi-status [DIR|DIR+] ...

It accepts a list of directories as command line argument. If the directory
name finishes with a "+", then the subdirectories of the given directory
are used instead of the directory itself.

The directories are then checked for git repositories. For each git repository
found, this prints out the repos that have un pushed commits in them.
"""

__author__  = "Parantapa Bhattacharya <pb@parantapa.net>"

import time
from os.path import join, abspath, dirname
from glob import glob
from subprocess import run

import click

def get_git_repos(xs):
    """
    Get the git directories from the given directories.
    """

    xs = [join(x, ".git") for x in xs]
    xs = [glob(x) for x in xs]
    xs = [y for ys in xs for y in ys]
    xs = [dirname(x) for x in xs]
    xs = [abspath(x) for x in xs]
    return xs

@click.command()
@click.option("-c", "--repo-dirs", default=None, type=click.File(),
              help="Use a file containing list of repo dirs instead of command line")
@click.option("-l", "--loop", is_flag=True,
              help="Repleatedly print out the states")
@click.option("-d", "--delay", default=5,
              help="Delay between the loops")
@click.argument("repos", nargs=-1)
def main(repo_dirs, loop, delay, repos):
    """
    Get the status of multiple git repositories.
    """

    if repo_dirs is not None:
        repos = repo_dirs.read().splitlines()
    if not repos:
        return

    with open("/dev/null", "w") as null:
        while True:
            dirs = get_git_repos(repos)

            cmd = ["git-prompt-output"] + dirs
            try:
                run(cmd, stderr=null)
            except CalledProcessError as e:
                print("Error: %s" % e)
                break

            if not loop:
                break

            time.sleep(delay)

if __name__ == '__main__':
    main()

