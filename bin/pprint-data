#!/usr/bin/env python2
"""
Print the pickle/yaml/json/msgpack file from stdin to stdout.
"""

import os
import fcntl
import termios
import struct
import sys
from pprint import pprint

class AttrDict(dict):
    """
    Dict subclass with attribute access.
    """

    def __getattr__(self, attr):
        return self[attr]

class AttrList(list):
    """
    List subclass with attribute access.
    """

    def __getattr__(self, attr):
        attr = attr[1:]
        return self[int(attr)]

def attr_convert(obj):
    """
    Convert the list/tuple/dict types to the attribute accessable types.
    """

    if isinstance(obj, list) or isinstance(obj, tuple):
        return AttrList(attr_convert(x) for x in obj)
    if isinstance(obj, dict):
        return AttrDict((k, attr_convert(v)) for k, v in obj.iteritems())
    return obj

def ioctl_GWINSZ(fd):
    """
    Get IOCTL win size.
    """

    try:
        cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
        return cr
    except:
        return

def get_terminal_size():
    """
    Get the size of the terminal.

    Copied from:
    https://stackoverflow.com/questions/566746/how-to-get-console-window-width-in-python
    """

    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)

    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass

    if not cr:
        env = os.environ
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))

    return int(cr[1]), int(cr[0])

def main():
    if len(sys.argv) == 3:
        dtype, fltr, fname = sys.argv[1], sys.argv[2], "-"
    elif len(sys.argv) == 4:
        _, dtype, fltr, fname = sys.argv
    else:
        print("pprint-data - Command line data processor")
        print("Usage: pprint-data <dtype> <filter> [file]")
        sys.exit(1)

    # Select the proper load function
    if dtype == "yaml":
        from yaml import load
    elif dtype == "pickle":
        from cPickle import load
    elif dtype == "json":
        from json import load
    elif dtype == "msgpack":
        from msgpack import load
    elif dtype == "numpy":
        from numpy import load
    else:
        print("Unknown data type: ", dtype)
        sys.exit(1)

    # Minor cleaning up of the filter
    fltr = fltr.strip()
    if fltr == ".":
        fltr = "_"

    # Load the file
    if fname == "-":
        x = sys.stdin
    else:
        x = open(fname, "rb")
    x = load(x)
    x = attr_convert(x)

    # Evaluate the expression
    z = eval(fltr, {"_": x})

    _, columns = get_terminal_size()
    try:
        pprint(z, indent=2, width=columns)
    except IOError:
        pass

if __name__ == '__main__':
    main()
